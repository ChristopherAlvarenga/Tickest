@using Microsoft.AspNetCore.Identity
@using Tickest.Models.ViewModels;
@model IEnumerable<DepartamentoListViewModel>
@inject UserManager<IdentityUser> userManager
@inject Tickest.Data.TickestContext _context

@{
    ViewData["Title"] = "Tickest - Departamentos";

    var user = await userManager.FindByEmailAsync(User.Identity.Name);

    var usuario = _context.Usuarios
        .Where(p => p.Email == User.Identity.Name)
        .FirstOrDefault();

    async Task<bool> Gerenciador()
    {
        return await userManager.IsInRoleAsync(user, "Gerenciador");
    }
    async Task<bool> Responsavel()
    {
        return await userManager.IsInRoleAsync(user, "Responsavel");
    }

    if (await Gerenciador())
        Layout = "_LayoutGerenciador";

    else if (await Responsavel())
        Layout = "_LayoutResponsavel";

    else
        Layout = "_Layout";
}

<div class="container p-4">
    <h2>Departamentos</h2>
    <p>Departamentos cadastrados no sistema:</p>
    <table class="table table-condensed" id="Tickets">
        <thead>
            <tr>
                @if (await Responsavel() || await Gerenciador())
                {
                    <th>Nome</th>
                    <th>Responsável</th>
                    <th>Ação</th>
                }
                else
                {
                    <th>Nome</th>
                    <th>Responsável</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var departamento in Model)
            {
                <tr>
                    <td>@departamento.Nome</td>
                    <td>@departamento.Responsavel.Nome</td>
                    @if (await Responsavel())
                    {
                        if (usuario.DepartamentoId == departamento.Id)
                        {
                            <td><a href="@Url.Action("Edit", "Departamentos", new { id = departamento.Id })">Editar</a></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else if (await Gerenciador())
                    {
                        <td><a href="@Url.Action("Edit", "Departamentos", new { id = departamento.Id })">Editar</a></td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    window.onload = function () {
        $('#Tickets').DataTable({
            "ordering": true,
            "paging": true,
            "searching": true,
            "oLanguage": {
                "sEmptyTable": "Nenhum registro encontrado na tabela",
                "sInfo": "Mostrar _START_ até _END_ de _TOTAL_ registros",
                "sInfoEmpty": "Mostrar 0 até 0 de 0 Registros",
                "sInfoFiltered": "(Filtrar de _MAX_ total registros)",
                "sInfoPostFix": "",
                "sInfoThousands": ".",
                "sLengthMenu": "Mostrar _MENU_ registros por pagina",
                "sLoadingRecords": "Carregando...",
                "sProcessing": "Processando...",
                "sZeroRecords": "Nenhum registro encontrado",
                "sSearch": "Pesquisar",
                "oPaginate": {
                    "sNext": "Proximo",
                    "sPrevious": "Anterior",
                    "sFirst": "Primeiro",
                    "sLast": "Ultimo"
                },
                "oAria": {
                    "sSortAscending": ": Ordenar colunas de forma ascendente",
                    "sSortDescending": ": Ordenar colunas de forma descendente"
                }
            }
        });
    }
</script>
