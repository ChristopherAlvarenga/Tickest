@using Microsoft.AspNetCore.Identity
@using Tickest.Models.ViewModels
@using Tickest.Models.Entities
@inject UserManager<Usuario> userManager
@inject Tickest.Data.TickestContext _context

@{
    Layout = "_LayoutGerenciador";
    ViewData["Title"] = "Tickest - Departamentos";

    var user = await userManager.FindByEmailAsync(User.Identity.Name);

    var usuario = _context.Usuarios
        .Where(p => p.Email == User.Identity.Name)
        .FirstOrDefault();

    async Task<bool> Gerenciador()
    {
        return await userManager.IsInRoleAsync(user, "Gerenciador");
    }
    async Task<bool> Responsavel()
    {
        return await userManager.IsInRoleAsync(user, "Responsavel");
    }

    async Task<bool> Cliente()
    {
        return await userManager.IsInRoleAsync(user, "Cliente");
    }
}

<div class="container-fluid" style="background-color: #ffffff; padding: 20px;">
    <h2>Departamentos</h2>
    <p>Departamentos cadastrados no sistema:</p>
    <table class="table table-condensed" id="Tickets">
        <thead>
            <tr>
                @if (await Responsavel() || await Gerenciador())
                {
                    <th>Nome</th>
                    <th>Responsável</th>
                    <th>Edição</th>
                    <th>Deletar</th>
                }
                else
                {
                    <th>Nome</th>
                    <th>Responsável</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var departamento in Model)
            {
                <tr>
                    <td>@departamento.Nome</td>
                    <td>@departamento.Gerenciador</td>
                    @if (await Responsavel())
                    {
                        if (usuario.DepartamentoId == departamento.Id)
                        {
                            <td><a href="@Url.Action("Edit", "Departamentos", new { id = departamento.Id })">Editar</a></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                    else if (await Gerenciador())
                    {
                        <td><a href="@Url.Action("Edit", "Departamentos", new { id = departamento.Id })">Editar</a></td>
                        <td><a href="@Url.Action("Delete", "Departamentos", new { id = departamento.Id })">Deletar</a></td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        $(document).ready(function () {
            $('#Tickets').DataTable({
                "ordering": true,
                "paging": true,
                "searching": true,
                "language": {
                    "emptyTable": "Nenhum registro encontrado na tabela",
                    "info": "Mostrando _START_ até _END_ de _TOTAL_ registros",
                    "infoEmpty": "Mostrando 0 até 0 de 0 Registros",
                    "infoFiltered": "(Filtrado de _MAX_ total registros)",
                    "infoPostFix": "",
                    "thousands": ".",
                    "lengthMenu": "Mostrar _MENU_ registros por página",
                    "loadingRecords": "Carregando...",
                    "processing": "Processando...",
                    "zeroRecords": "Nenhum registro encontrado",
                    "search": "Pesquisar",
                    "paginate": {
                        "next": "Próximo",
                        "previous": "Anterior",
                        "first": "Primeiro",
                        "last": "Último"
                    },
                    "aria": {
                        "sortAscending": ": Ordenar colunas de forma ascendente",
                        "sortDescending": ": Ordenar colunas de forma descendente"
                    }
                }
            });
        });
    </script>
}
